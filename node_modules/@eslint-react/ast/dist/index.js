import { AST_NODE_TYPES } from "@typescript-eslint/types";
import { dual, unit } from "@eslint-react/eff";
import { delimiterCase, replace, toLowerCase } from "string-ts";
import { ASTUtils } from "@typescript-eslint/utils";
import { simpleTraverse } from "@typescript-eslint/typescript-estree";

//#region src/array-index.ts
const indexParamPosition = new Map([
	["every", 1],
	["filter", 1],
	["find", 1],
	["findIndex", 1],
	["findLast", 1],
	["findLastIndex", 1],
	["flatMap", 1],
	["forEach", 1],
	["map", 1],
	["reduce", 2],
	["reduceRight", 2],
	["some", 1]
]);
function getArrayMethodCallbackIndexParamPosition(methodName) {
	return indexParamPosition.get(methodName) ?? -1;
}

//#endregion
//#region src/array-method.ts
function isArrayFromCall(node, loose = true) {
	if (node.type !== AST_NODE_TYPES.CallExpression) return false;
	if (node.callee.type !== AST_NODE_TYPES.MemberExpression) return false;
	if (node.callee.property.type !== AST_NODE_TYPES.Identifier) return false;
	const name = node.callee.property.name;
	return name === "from" || loose && name.startsWith("from");
}
function isArrayMapCall(node, loose = true) {
	if (node.type !== AST_NODE_TYPES.CallExpression) return false;
	if (node.callee.type !== AST_NODE_TYPES.MemberExpression) return false;
	if (node.callee.property.type !== AST_NODE_TYPES.Identifier) return false;
	const name = node.callee.property.name;
	return name === "map" || loose && name.endsWith("Map");
}

//#endregion
//#region src/class-id.ts
function getClassId(node) {
	if (node.id != null) return node.id;
	if (node.parent.type === AST_NODE_TYPES.VariableDeclarator && node.parent.id.type === AST_NODE_TYPES.Identifier) return node.parent.id;
	return unit;
}

//#endregion
//#region src/node-equal.ts
/**
* Determines whether node equals to another node
* @param a node to compare
* @param b node to compare
* @returns `true` if node equal
* @see https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/src/util/isNodeEqual.ts
*/
const isNodeEqual = dual(2, (a, b) => {
	switch (true) {
		case a === b: return true;
		case a.type !== b.type: return false;
		case a.type === AST_NODE_TYPES.Literal && b.type === AST_NODE_TYPES.Literal: return a.value === b.value;
		case a.type === AST_NODE_TYPES.TemplateElement && b.type === AST_NODE_TYPES.TemplateElement: return a.value.raw === b.value.raw;
		case a.type === AST_NODE_TYPES.TemplateLiteral && b.type === AST_NODE_TYPES.TemplateLiteral: {
			if (a.quasis.length !== b.quasis.length || a.expressions.length !== b.expressions.length) return false;
			let i = a.quasis.length;
			while (i--) if (a.quasis[i]?.value.raw !== b.quasis[i]?.value.raw) return false;
			i = a.expressions.length;
			while (i--) {
				const exprA = a.expressions[i];
				const exprB = b.expressions[i];
				if (!isNodeEqual(exprA, exprB)) return false;
			}
			return true;
		}
		case a.type === AST_NODE_TYPES.Identifier && b.type === AST_NODE_TYPES.Identifier: return a.name === b.name;
		case a.type === AST_NODE_TYPES.PrivateIdentifier && b.type === AST_NODE_TYPES.PrivateIdentifier: return a.name === b.name;
		case a.type === AST_NODE_TYPES.MemberExpression && b.type === AST_NODE_TYPES.MemberExpression: return isNodeEqual(a.property, b.property) && isNodeEqual(a.object, b.object);
		case a.type === AST_NODE_TYPES.JSXAttribute && b.type === AST_NODE_TYPES.JSXAttribute:
			if (a.name.name !== b.name.name) return false;
			if (a.value == null || b.value == null) return a.value === b.value;
			return isNodeEqual(a.value, b.value);
		case a.type === AST_NODE_TYPES.ThisExpression && b.type === AST_NODE_TYPES.ThisExpression: return true;
		default: return false;
	}
});

//#endregion
//#region src/node-is.ts
const is = ASTUtils.isNodeOfType;
const isOneOf = ASTUtils.isNodeOfTypes;
const isFunction = isOneOf([
	AST_NODE_TYPES.ArrowFunctionExpression,
	AST_NODE_TYPES.FunctionDeclaration,
	AST_NODE_TYPES.FunctionExpression
]);
const isFunctionType = isOneOf([
	AST_NODE_TYPES.ArrowFunctionExpression,
	AST_NODE_TYPES.FunctionDeclaration,
	AST_NODE_TYPES.FunctionExpression,
	AST_NODE_TYPES.TSCallSignatureDeclaration,
	AST_NODE_TYPES.TSConstructSignatureDeclaration,
	AST_NODE_TYPES.TSDeclareFunction,
	AST_NODE_TYPES.TSEmptyBodyFunctionExpression,
	AST_NODE_TYPES.TSFunctionType,
	AST_NODE_TYPES.TSMethodSignature
]);
const isClass = isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression]);
const isMethodOrProperty = isOneOf([AST_NODE_TYPES.PropertyDefinition, AST_NODE_TYPES.MethodDefinition]);
const isProperty = isOneOf([
	AST_NODE_TYPES.PropertyDefinition,
	AST_NODE_TYPES.TSIndexSignature,
	AST_NODE_TYPES.TSParameterProperty,
	AST_NODE_TYPES.TSPropertySignature
]);
const isJSXElement = is(AST_NODE_TYPES.JSXElement);
const isJSXFragment = is(AST_NODE_TYPES.JSXFragment);
const isJSXTagNameExpression = isOneOf([
	AST_NODE_TYPES.JSXIdentifier,
	AST_NODE_TYPES.JSXMemberExpression,
	AST_NODE_TYPES.JSXNamespacedName
]);
const isJSX = isOneOf([
	AST_NODE_TYPES.JSXAttribute,
	AST_NODE_TYPES.JSXClosingElement,
	AST_NODE_TYPES.JSXClosingFragment,
	AST_NODE_TYPES.JSXElement,
	AST_NODE_TYPES.JSXEmptyExpression,
	AST_NODE_TYPES.JSXExpressionContainer,
	AST_NODE_TYPES.JSXFragment,
	AST_NODE_TYPES.JSXIdentifier,
	AST_NODE_TYPES.JSXMemberExpression,
	AST_NODE_TYPES.JSXNamespacedName,
	AST_NODE_TYPES.JSXOpeningElement,
	AST_NODE_TYPES.JSXOpeningFragment,
	AST_NODE_TYPES.JSXSpreadAttribute,
	AST_NODE_TYPES.JSXSpreadChild,
	AST_NODE_TYPES.JSXText
]);
const isLoop = isOneOf([
	AST_NODE_TYPES.DoWhileStatement,
	AST_NODE_TYPES.ForInStatement,
	AST_NODE_TYPES.ForOfStatement,
	AST_NODE_TYPES.ForStatement,
	AST_NODE_TYPES.WhileStatement
]);
const isTypeExpression = isOneOf([
	AST_NODE_TYPES.TSAsExpression,
	AST_NODE_TYPES.TSTypeAssertion,
	AST_NODE_TYPES.TSNonNullExpression,
	AST_NODE_TYPES.TSSatisfiesExpression,
	AST_NODE_TYPES.TSInstantiationExpression
]);
const isTypeAssertionExpression = isOneOf([
	AST_NODE_TYPES.TSAsExpression,
	AST_NODE_TYPES.TSTypeAssertion,
	AST_NODE_TYPES.TSNonNullExpression,
	AST_NODE_TYPES.TSSatisfiesExpression
]);

//#endregion
//#region src/node-format.ts
function getLiteralValueType(input) {
	if (input === null) return "null";
	return typeof input;
}
/**
* @internal
*/
function toDelimiterFormat(node, delimiter = " ") {
	if (node.type === AST_NODE_TYPES.Literal) {
		if ("regex" in node) return "RegExp literal";
		return `${getLiteralValueType(node.value)} literal`;
	}
	if (isJSX(node)) return `JSX ${toLowerCase(delimiterCase(replace(node.type, "JSX", ""), delimiter))}`;
	return toLowerCase(delimiterCase(node.type, delimiter));
}
/**
* Incomplete but sufficient stringification of AST nodes for common use cases
*
* @internal
*/
function toStringFormat(node, getText) {
	switch (node.type) {
		case AST_NODE_TYPES.Identifier:
		case AST_NODE_TYPES.JSXIdentifier:
		case AST_NODE_TYPES.PrivateIdentifier: return node.name;
		case AST_NODE_TYPES.MemberExpression:
		case AST_NODE_TYPES.JSXMemberExpression: return `${toStringFormat(node.object, getText)}.${toStringFormat(node.property, getText)}`;
		case AST_NODE_TYPES.JSXNamespacedName: return `${node.namespace.name}:${node.name.name}`;
		case AST_NODE_TYPES.JSXText: return node.value;
		case AST_NODE_TYPES.Literal: return node.raw;
		default: return getText(node);
	}
}

//#endregion
//#region src/expression-base.ts
/**
* Unwraps any type expressions to get the underlying JavaScript expression node.
* Recursively processes nodes until a non-type expression is found.
*
* @param node - The AST node to unwrap
* @returns The underlying JavaScript expression node
*/
function getUnderlyingExpression(node) {
	if (isTypeExpression(node)) return getUnderlyingExpression(node.expression);
	return node;
}

//#endregion
//#region src/expression-is.ts
/**
* Checks if the given expression is a 'this' expression.
* Unwraps any type expressions before checking.
*
* @param node - The expression node to check
* @returns true if the expression is a ThisExpression, false otherwise
*/
function isThisExpression(node) {
	return getUnderlyingExpression(node).type === AST_NODE_TYPES.ThisExpression;
}

//#endregion
//#region src/traverse-up.ts
function findParentNode(node, test) {
	if (node == null) return unit;
	let parent = node.parent;
	while (parent != null && parent.type !== AST_NODE_TYPES.Program) {
		if (test(parent)) return parent;
		parent = parent.parent;
	}
	return unit;
}

//#endregion
//#region src/expression-nested.ts
/**
* Get all nested identifiers in a expression like node
* @param node The node to get the nested identifiers from
* @returns All nested identifiers
*/
function getNestedIdentifiers(node) {
	const identifiers = [];
	if (node.type === AST_NODE_TYPES.Identifier) identifiers.push(node);
	if ("arguments" in node) {
		const chunk = node.arguments.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("elements" in node) {
		const chunk = node.elements.filter((x) => x != null).map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("properties" in node) {
		const chunk = node.properties.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("expressions" in node) {
		const chunk = node.expressions.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("left" in node) {
		const chunk = getNestedIdentifiers(node.left);
		identifiers.push(...chunk);
	}
	if ("right" in node) {
		const chunk = getNestedIdentifiers(node.right);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.Property) {
		const chunk = getNestedIdentifiers(node.value);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.SpreadElement) {
		const chunk = getNestedIdentifiers(node.argument);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.MemberExpression) {
		const chunk = getNestedIdentifiers(node.object);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.UnaryExpression) {
		const chunk = getNestedIdentifiers(node.argument);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.ChainExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.TSNonNullExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.TSAsExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === AST_NODE_TYPES.TSSatisfiesExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	return identifiers;
}
/**
* Gets the nested return statements in the node that are within the same function
* @param node The AST node
* @returns The nested return statements in the node
*/
function getNestedReturnStatements(node) {
	const statements = [];
	const boundaryNode = isFunction(node) ? node : findParentNode(node, isFunction);
	simpleTraverse(node, { enter(node$1) {
		if (node$1.type !== AST_NODE_TYPES.ReturnStatement) return;
		if (findParentNode(node$1, isFunction) !== boundaryNode) return;
		statements.push(node$1);
	} });
	return statements;
}
/**
* Get all nested expressions of type T in an expression like node
* @param type The type of the expression to retrieve within the node
* @returns A partially applied function bound to a predicate of type T. The returned function can be called passing a
* node, and it will return an array of all nested expressions of type T.
*/
function getNestedExpressionsOfType(type) {
	const isNodeOfType = is(type);
	return function(node) {
		const boundGetNestedExpressionsOfType = getNestedExpressionsOfType(type);
		const expressions = [];
		if (isNodeOfType(node)) expressions.push(node);
		if ("arguments" in node) {
			const chunk = node.arguments.map(getNestedExpressionsOfType(type)).flat(1);
			expressions.push(...chunk);
		}
		if ("expression" in node && node.expression !== true && node.expression !== false) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if ("left" in node) {
			const chunk = boundGetNestedExpressionsOfType(node.left);
			expressions.push(...chunk);
		}
		if ("right" in node) {
			const chunk = boundGetNestedExpressionsOfType(node.right);
			expressions.push(...chunk);
		}
		if ("test" in node && node.test != null) {
			const chunk = boundGetNestedExpressionsOfType(node.test);
			expressions.push(...chunk);
		}
		if ("consequent" in node) {
			const chunk = Array.isArray(node.consequent) ? node.consequent.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.consequent);
			expressions.push(...chunk);
		}
		if ("alternate" in node && node.alternate != null) {
			const chunk = Array.isArray(node.alternate) ? node.alternate.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.alternate);
			expressions.push(...chunk);
		}
		if ("elements" in node) {
			const chunk = node.elements.filter((x) => x != null).map(getNestedExpressionsOfType(type)).flat(1);
			expressions.push(...chunk);
		}
		if ("properties" in node) {
			const chunk = node.properties.map(boundGetNestedExpressionsOfType).flat(1);
			expressions.push(...chunk);
		}
		if ("expressions" in node) {
			const chunk = node.expressions.map(boundGetNestedExpressionsOfType).flat(1);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.Property) {
			const chunk = boundGetNestedExpressionsOfType(node.value);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.SpreadElement) {
			const chunk = boundGetNestedExpressionsOfType(node.argument);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.MemberExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.object);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.UnaryExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.argument);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.ChainExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.TSNonNullExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.TSAsExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === AST_NODE_TYPES.TSSatisfiesExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		return expressions;
	};
}
/**
* Get all nested new expressions in an expression like node
* @param node The node to get the nested new expressions from
* @returns All nested new expressions
*/
const getNestedNewExpressions = getNestedExpressionsOfType(AST_NODE_TYPES.NewExpression);
/**
* Get all nested call expressions in a expression like node
* @param node The node to get the nested call expressions from
* @returns All nested call expressions
*/
const getNestedCallExpressions = getNestedExpressionsOfType(AST_NODE_TYPES.CallExpression);

//#endregion
//#region src/function-id.ts
/**
* Gets the static name of a function AST node. For function declarations it is
* easy. For anonymous function expressions it is much harder. If you search for
* `IsAnonymousFunctionDefinition()` in the ECMAScript spec you'll find places
* where JS gives anonymous function expressions names. We roughly detect the
* same AST nodes with some exceptions to better fit our use case.
*/
function getFunctionId(node) {
	switch (true) {
		case "id" in node && node.id != null: return node.id;
		case node.parent.type === AST_NODE_TYPES.VariableDeclarator && node.parent.init === node && node.parent.id.type === AST_NODE_TYPES.Identifier: return node.parent.id;
		case node.parent.type === AST_NODE_TYPES.AssignmentExpression && node.parent.right === node && node.parent.operator === "=" && node.parent.left.type === AST_NODE_TYPES.Identifier: return node.parent.left;
		case node.parent.type === AST_NODE_TYPES.Property && node.parent.value === node && !node.parent.computed && node.parent.key.type === AST_NODE_TYPES.Identifier: return node.parent.key;
		case isMethodOrProperty(node.parent) && node.parent.value === node && node.parent.key.type === AST_NODE_TYPES.Identifier: return node.parent.key;
		case node.parent.type === AST_NODE_TYPES.AssignmentPattern && node.parent.right === node && node.parent.left.type === AST_NODE_TYPES.Identifier: return node.parent.left;
		case isTypeAssertionExpression(node.parent): return getFunctionId(node.parent);
	}
	return unit;
}

//#endregion
//#region src/function-init-path.ts
/**
* Identifies the initialization path of a function node in the AST.
* Determines what kind of component declaration pattern the function belongs to.
*
* @param node - The function node to analyze
* @returns The function initialization path or unit if not identifiable
*/
function getFunctionInitPath(node) {
	if (node.type === AST_NODE_TYPES.FunctionDeclaration) return [node];
	const { parent } = node;
	switch (true) {
		case parent.type === AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent,
			parent,
			node
		];
		case parent.type === AST_NODE_TYPES.CallExpression && parent.parent.type === AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === AST_NODE_TYPES.CallExpression && parent.parent.type === AST_NODE_TYPES.CallExpression && parent.parent.parent.type === AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent.parent,
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === AST_NODE_TYPES.Property && parent.parent.type === AST_NODE_TYPES.ObjectExpression && parent.parent.parent.type === AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent.parent,
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === AST_NODE_TYPES.MethodDefinition && parent.parent.parent.type === AST_NODE_TYPES.ClassDeclaration: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === AST_NODE_TYPES.PropertyDefinition && parent.parent.parent.type === AST_NODE_TYPES.ClassDeclaration: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
	}
	return unit;
}
/**
* Checks if a specific function call exists in the function initialization path.
* Useful for detecting HOCs like React.memo, React.forwardRef, etc.
*
* @param callName - The name of the call to check for (e.g., "memo", "forwardRef")
* @param initPath - The function initialization path to search in
* @returns True if the call exists in the path, false otherwise
*/
function hasCallInFunctionInitPath(callName, initPath) {
	return initPath.some((node) => {
		if (node.type !== AST_NODE_TYPES.CallExpression) return false;
		const { callee } = node;
		if (callee.type === AST_NODE_TYPES.Identifier) return callee.name === callName;
		if (callee.type === AST_NODE_TYPES.MemberExpression && "name" in callee.property) return callee.property.name === callName;
		return false;
	});
}

//#endregion
//#region src/function-is.ts
function isFunctionEmpty(node) {
	return node.body.type === AST_NODE_TYPES.BlockStatement && node.body.body.length === 0;
}
function isFunctionImmediatelyInvoked(node) {
	return node.type !== AST_NODE_TYPES.FunctionDeclaration && node.parent.type === AST_NODE_TYPES.CallExpression && node.parent.callee === node;
}

//#endregion
//#region src/literal.ts
function isLiteral(node, type) {
	if (node.type !== AST_NODE_TYPES.Literal) return false;
	if (type == null) return true;
	switch (type) {
		case "boolean": return typeof node.value === "boolean";
		case "null": return node.value === null;
		case "number": return typeof node.value === "number";
		case "regexp": return "regex" in node;
		case "string": return typeof node.value === "string";
	}
}

//#endregion
//#region src/misc.ts
/**
* Check if a node is multiline
* @param node The AST node to check
* @returns  `true` if the node is multiline
*/
function isMultiLine(node) {
	return node.loc.start.line !== node.loc.end.line;
}
/**
* Check if a node is a line break
* @param node The AST node to check
* @returns boolean
*/
function isLineBreak(node) {
	return isOneOf([AST_NODE_TYPES.Literal, AST_NODE_TYPES.JSXText])(node) && typeof node.value === "string" && node.value.trim() === "" && isMultiLine(node);
}

//#endregion
//#region src/node-selectors.ts
const SEL_IMPLICIT_RETURN_ARROW_FUNCTION_EXPRESSION = "ArrowFunctionExpression[body.type!='BlockStatement']";
const SEL_OBJECT_DESTRUCTURING_VARIABLE_DECLARATOR = [
	"VariableDeclarator",
	"[id.type='ObjectPattern']",
	"[init.type='Identifier']"
].join("");
const SEL_DISPLAY_NAME_ASSIGNMENT_EXPRESSION = [
	"AssignmentExpression",
	"[operator='=']",
	"[left.type='MemberExpression']",
	"[left.property.name='displayName']"
].join("");

//#endregion
//#region src/process-env-node-env.ts
/**
* Check if the given node is a member expression that accesses `process.env.NODE_ENV`
* @param node The AST node
* @returns True if the node is a member expression that accesses `process.env.NODE_ENV`, false otherwise
*/
function isProcessEnvNodeEnv(node) {
	return node != null && node.type === AST_NODE_TYPES.MemberExpression && node.object.type === AST_NODE_TYPES.MemberExpression && node.object.object.type === AST_NODE_TYPES.Identifier && node.object.object.name === "process" && node.object.property.type === AST_NODE_TYPES.Identifier && node.object.property.name === "env" && node.property.type === AST_NODE_TYPES.Identifier && node.property.name === "NODE_ENV";
}
/**
* Check if the given node is a binary expression that compares `process.env.NODE_ENV` with a string literal.
* @param node The AST node
* @param operator The operator used in the comparison
* @param value The string literal value to compare against
* @returns True if the node is a binary expression that compares `process.env.NODE_ENV` with the specified value, false otherwise
*/
function isProcessEnvNodeEnvCompare(node, operator, value) {
	if (node == null) return false;
	if (node.type !== AST_NODE_TYPES.BinaryExpression) return false;
	if (node.operator !== operator) return false;
	if (isProcessEnvNodeEnv(node.left) && isLiteral(node.right, "string")) return node.right.value === value;
	if (isLiteral(node.left, "string") && isProcessEnvNodeEnv(node.right)) return node.left.value === value;
	return false;
}

//#endregion
//#region src/promise-then.ts
function isThenCall(node) {
	return node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && node.callee.property.name === "then";
}

//#endregion
//#region src/property-name.ts
function getPropertyName(node) {
	if (isTypeExpression(node)) return getPropertyName(getUnderlyingExpression(node));
	if (node.type === AST_NODE_TYPES.Identifier || node.type === AST_NODE_TYPES.PrivateIdentifier) return node.name;
	if (node.type === AST_NODE_TYPES.Literal) return String(node.value);
	if (node.type === AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) return node.quasis[0]?.value.raw;
	return unit;
}

//#endregion
//#region src/vitest-mock.ts
/**
* Checks if the given node is a `vi.mock`.
* @param node The node to check
* @returns `true` if the node is a `vi.mock`, otherwise `false`.
* @internal
*/
function isViMock(node) {
	return node != null && node.type === AST_NODE_TYPES.MemberExpression && node.object.type === AST_NODE_TYPES.Identifier && node.object.name === "vi" && node.property.type === AST_NODE_TYPES.Identifier && node.property.name === "mock";
}
/**
* Checks if the given node is a `vi.mock` callback.
* @param node The node to check
* @returns `true` if the node is a `vi.mock` callback, otherwise `false`.
* @internal
*/
function isViMockCallback(node) {
	return node != null && isFunction(node) && node.parent.type === AST_NODE_TYPES.CallExpression && isViMock(node.parent.callee) && node.parent.arguments[1] === node;
}

//#endregion
export { SEL_DISPLAY_NAME_ASSIGNMENT_EXPRESSION, SEL_IMPLICIT_RETURN_ARROW_FUNCTION_EXPRESSION, SEL_OBJECT_DESTRUCTURING_VARIABLE_DECLARATOR, findParentNode, getArrayMethodCallbackIndexParamPosition, getClassId, getFunctionId, getFunctionInitPath, getNestedCallExpressions, getNestedExpressionsOfType, getNestedIdentifiers, getNestedNewExpressions, getNestedReturnStatements, getPropertyName, getUnderlyingExpression, hasCallInFunctionInitPath, is, isArrayFromCall, isArrayMapCall, isClass, isFunction, isFunctionEmpty, isFunctionImmediatelyInvoked, isFunctionType, isJSX, isJSXElement, isJSXFragment, isJSXTagNameExpression, isLineBreak, isLiteral, isLoop, isMethodOrProperty, isMultiLine, isNodeEqual, isOneOf, isProcessEnvNodeEnv, isProcessEnvNodeEnvCompare, isProperty, isThenCall, isThisExpression, isTypeAssertionExpression, isTypeExpression, isViMock, isViMockCallback, toDelimiterFormat, toStringFormat };
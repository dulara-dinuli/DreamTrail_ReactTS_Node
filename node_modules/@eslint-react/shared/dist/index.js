import module from "node:module";
import path from "node:path";
import { getOrElseUpdate, identity } from "@eslint-react/eff";
import { P, match } from "ts-pattern";
import "@eslint-react/kit";
import { z } from "zod/v4";

//#region src/_id.ts
let id = 0n;
/**
* @internal
*/
const getId = () => (id++).toString();

//#endregion
//#region src/_require.ts
/**
* @internal
*/
const _require = module.createRequire(process.cwd() + path.sep);

//#endregion
//#region src/constants.ts
/**
* The NPM scope for this project.
*/
const NPM_SCOPE = "@eslint-react";
/**
* The GitHub repository for this project.
*/
const GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
/**
* The URL to the project's website.
*/
const WEBSITE_URL = "https://eslint-react.xyz";

//#endregion
//#region src/get-config-adapters.ts
function getConfigAdapters(pluginName, plugin) {
	function toFlatConfig(config) {
		return {
			...config,
			plugins: { [pluginName]: plugin }
		};
	}
	function toLegacyConfig({ rules }) {
		return {
			plugins: [pluginName],
			rules
		};
	}
	return {
		toFlatConfig,
		toLegacyConfig
	};
}

//#endregion
//#region src/get-doc-url.ts
/**
* Get the URL for the documentation of a rule in a plugin.
* @internal
* @param pluginName The name of the plugin.
* @returns The URL for the documentation of a rule.
*/
const getDocsUrl = (pluginName) => (ruleName) => {
	if (pluginName === "x") return `${WEBSITE_URL}/docs/rules/${ruleName}`;
	return `${WEBSITE_URL}/docs/rules/${pluginName}-${ruleName}`;
};

//#endregion
//#region src/get-react-version.ts
function getReactVersion(fallback) {
	try {
		return match(_require("react")).with({ version: P.select(P.string) }, identity).otherwise(() => fallback);
	} catch {
		return fallback;
	}
}

//#endregion
//#region src/settings.ts
/**
* Schema for ESLint React settings configuration
* @internal
*/
const ESLintReactSettingsSchema = z.object({
	importSource: z.optional(z.string()),
	polymorphicPropName: z.optional(z.string()),
	version: z.optional(z.string())
});
/**
* Schema for ESLint settings
* @internal
*/
const ESLintSettingsSchema = z.optional(z.object({ "react-x": z.optional(z.unknown()) }));
/**
* Default ESLint React settings
*/
const DEFAULT_ESLINT_REACT_SETTINGS = {
	version: "detect",
	importSource: "react",
	polymorphicPropName: "as"
};
/**
* Default ESLint settings with React settings included
*/
const DEFAULT_ESLINT_SETTINGS = { "react-x": DEFAULT_ESLINT_REACT_SETTINGS };
/**
* Checks if the provided settings conform to ESLintSettings schema
* @param settings The settings object to validate
*/
function isESLintSettings(settings) {
	return ESLintSettingsSchema.safeParse(settings).success;
}
/**
* Checks if the provided settings conform to ESLintReactSettings schema
* @param settings The settings object to validate
*/
function isESLintReactSettings(settings) {
	return ESLintReactSettingsSchema.safeParse(settings).success;
}
/**
* Coerces unknown input to ESLintSettings type
* @param settings The settings object to coerce
*/
const coerceESLintSettings = (settings) => {
	return settings;
};
/**
* Decodes and validates ESLint settings, using defaults if invalid
* @param settings The settings object to decode
*/
const decodeESLintSettings = (settings) => {
	if (isESLintSettings(settings)) return settings;
	return DEFAULT_ESLINT_SETTINGS;
};
/**
* Coerces unknown input to ESLintReactSettings type
* @param settings The settings object to coerce
*/
const coerceSettings = (settings) => {
	return settings;
};
/**
* Decodes and validates ESLint React settings, using defaults if invalid
* @param settings The settings object to decode
*/
const decodeSettings = (settings) => {
	if (isESLintReactSettings(settings)) return settings;
	return DEFAULT_ESLINT_REACT_SETTINGS;
};
/**
* Normalizes ESLint React settings to a consistent internal format
* Transforms component definitions and resolves version information
*/
const normalizeSettings = ({ importSource = "react", polymorphicPropName = "as", version,...rest }) => {
	return {
		...rest,
		importSource,
		polymorphicPropName,
		version: match(version).with(P.union(P.nullish, "", "detect"), () => getReactVersion("19.1.0")).otherwise(identity)
	};
};
const cache = /* @__PURE__ */ new Map();
/**
* Retrieves normalized ESLint React settings from the rule context
* Uses caching for performance optimization
* @param context The ESLint rule context
*/
function getSettingsFromContext(context) {
	const settings = context.settings;
	return getOrElseUpdate(cache, settings["react-x"], () => normalizeSettings(decodeSettings(settings["react-x"])));
}
/**
* Helper function for defining typed settings for "react-x" in JavaScript files
* Provides type checking without runtime transformation
*/
const defineSettings = identity;

//#endregion
export { DEFAULT_ESLINT_REACT_SETTINGS, DEFAULT_ESLINT_SETTINGS, ESLintReactSettingsSchema, ESLintSettingsSchema, GITHUB_URL, NPM_SCOPE, WEBSITE_URL, _require, coerceESLintSettings, coerceSettings, decodeESLintSettings, decodeSettings, defineSettings, getConfigAdapters, getDocsUrl, getId, getReactVersion, getSettingsFromContext, isESLintReactSettings, isESLintSettings, normalizeSettings };
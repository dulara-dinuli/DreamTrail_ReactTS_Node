import { unit } from "@eslint-react/eff";
import * as _eslint_react_kit0 from "@eslint-react/kit";
import { CompatibleConfig, CompatiblePlugin, RuleContext } from "@eslint-react/kit";
import { z } from "zod/v4";
import { PartialDeep } from "type-fest";

//#region src/_id.d.ts
/**
 * @internal
 */
declare const getId: () => string;
//#endregion
//#region src/_require.d.ts
/**
 * @internal
 */
declare const _require: NodeJS.Require;
//#endregion
//#region src/constants.d.ts
/**
 * The NPM scope for this project.
 */
declare const NPM_SCOPE = "@eslint-react";
/**
 * The GitHub repository for this project.
 */
declare const GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
/**
 * The URL to the project's website.
 */
declare const WEBSITE_URL = "https://eslint-react.xyz";
//#endregion
//#region src/get-config-adapters.d.ts
declare function getConfigAdapters(pluginName: string, plugin: CompatiblePlugin): {
  readonly toFlatConfig: (config: CompatibleConfig) => {
    plugins: {
      [pluginName]: CompatiblePlugin;
    };
    name?: string;
    rules?: Record<string, _eslint_react_kit0.RuleConfig>;
    settings?: _eslint_react_kit0.SettingsConfig;
  };
  readonly toLegacyConfig: ({
    rules
  }: CompatibleConfig) => {
    plugins: string[];
    rules: Record<string, _eslint_react_kit0.RuleConfig<unknown[]>> | undefined;
  };
};
//#endregion
//#region src/get-doc-url.d.ts
/**
 * Get the URL for the documentation of a rule in a plugin.
 * @internal
 * @param pluginName The name of the plugin.
 * @returns The URL for the documentation of a rule.
 */
declare const getDocsUrl: (pluginName: string) => (ruleName: string) => string;
//#endregion
//#region src/get-react-version.d.ts
declare function getReactVersion(fallback: string): string;
//#endregion
//#region src/settings.d.ts
/**
 * Schema for ESLint React settings configuration
 * @internal
 */
declare const ESLintReactSettingsSchema: z.ZodObject<{
  importSource: z.ZodOptional<z.ZodString>;
  polymorphicPropName: z.ZodOptional<z.ZodString>;
  version: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * Schema for ESLint settings
 * @internal
 */
declare const ESLintSettingsSchema: z.ZodOptional<z.ZodObject<{
  "react-x": z.ZodOptional<z.ZodUnknown>;
}, z.core.$strip>>;
type ESLintSettings = z.infer<typeof ESLintSettingsSchema>;
type ESLintReactSettings = z.infer<typeof ESLintReactSettingsSchema>;
/**
 * Normalized ESLint React settings with processed values
 */
interface ESLintReactSettingsNormalized {
  importSource: string;
  polymorphicPropName: string | unit;
  version: string;
}
/**
 * Default ESLint React settings
 */
declare const DEFAULT_ESLINT_REACT_SETTINGS: {
  readonly version: "detect";
  readonly importSource: "react";
  readonly polymorphicPropName: "as";
};
/**
 * Default ESLint settings with React settings included
 */
declare const DEFAULT_ESLINT_SETTINGS: {
  readonly "react-x": {
    readonly version: "detect";
    readonly importSource: "react";
    readonly polymorphicPropName: "as";
  };
};
/**
 * Checks if the provided settings conform to ESLintSettings schema
 * @param settings The settings object to validate
 */
declare function isESLintSettings(settings: unknown): settings is ESLintSettings;
/**
 * Checks if the provided settings conform to ESLintReactSettings schema
 * @param settings The settings object to validate
 */
declare function isESLintReactSettings(settings: unknown): settings is ESLintReactSettings;
/**
 * Coerces unknown input to ESLintSettings type
 * @param settings The settings object to coerce
 */
declare const coerceESLintSettings: (settings: unknown) => PartialDeep<ESLintSettings>;
/**
 * Decodes and validates ESLint settings, using defaults if invalid
 * @param settings The settings object to decode
 */
declare const decodeESLintSettings: (settings: unknown) => ESLintSettings;
/**
 * Coerces unknown input to ESLintReactSettings type
 * @param settings The settings object to coerce
 */
declare const coerceSettings: (settings: unknown) => PartialDeep<ESLintReactSettings>;
/**
 * Decodes and validates ESLint React settings, using defaults if invalid
 * @param settings The settings object to decode
 */
declare const decodeSettings: (settings: unknown) => ESLintReactSettings;
/**
 * Normalizes ESLint React settings to a consistent internal format
 * Transforms component definitions and resolves version information
 */
declare const normalizeSettings: ({
  importSource,
  polymorphicPropName,
  version,
  ...rest
}: ESLintReactSettings) => {
  readonly importSource: string;
  readonly polymorphicPropName: string;
  readonly version: string;
};
/**
 * Retrieves normalized ESLint React settings from the rule context
 * Uses caching for performance optimization
 * @param context The ESLint rule context
 */
declare function getSettingsFromContext(context: RuleContext): ESLintReactSettingsNormalized;
/**
 * Helper function for defining typed settings for "react-x" in JavaScript files
 * Provides type checking without runtime transformation
 */
declare const defineSettings: (settings: ESLintReactSettings) => ESLintReactSettings;
declare module "@typescript-eslint/utils/ts-eslint" {
  interface SharedConfigurationSettings {
    ["react-x"]?: Partial<ESLintReactSettings>;
  }
}
//#endregion
export { DEFAULT_ESLINT_REACT_SETTINGS, DEFAULT_ESLINT_SETTINGS, ESLintReactSettings, ESLintReactSettingsNormalized, ESLintReactSettingsSchema, ESLintSettings, ESLintSettingsSchema, GITHUB_URL, NPM_SCOPE, WEBSITE_URL, _require, coerceESLintSettings, coerceSettings, decodeESLintSettings, decodeSettings, defineSettings, getConfigAdapters, getDocsUrl, getId, getReactVersion, getSettingsFromContext, isESLintReactSettings, isESLintSettings, normalizeSettings };